name: Sync Github Open Data repository and its metadata to OpenCoDE.de
description: "Workflow to sync OpenCoDE and Github"

inputs:
  # OpenCoDE Metadata
  GROUP_ID:
    description: "OpenCoDE Grpup ID"
    default: "2781"
    required: true
  ACCESS_USER:
    description: "OpenCoDE publishing username"
    default: "RKIOpenData"
    required: true
  BRANCH:
    description: "Branch to checkout"
    default: "main"
    required: true
  # Repository metadata
  REPO_PATH:
    description: "The repository name must not start or end with a special character and must not contain consecutive special characters"
    default: ${{ github.event.repository.name }}
    required: true
  ZENODOJSON_PATH:
    description: "Path to Zenodo.json that contains the repository metadata"
    required: true
    default: "Metadaten/zenodo-invenio.json"

  # Enviroment variables
  OPENCODE_TOKEN:
    description: "Access Token for OpenCoDE User"
    required: true
  GITHUB_TOKEN:
    description: "Github Token"
    required: true
    
runs:
  using: "composite"
  
  steps:
    - name: Get OpencoDE group path
      id: group_path
      shell: bash
      run: | 
        # Get OpencoDE group path
        GROUP_INFO=$(curl \
          --request GET "https://gitlab.opencode.de/api/v4/groups/${{inputs.GROUP_ID }}" \
          --header "PRIVATE-TOKEN: ${{ inputs.OPENCODE_TOKEN }}") 
        echo "GROUP_PATH="$(echo $GROUP_INFO | jq -r '.full_path' )"" >> $GITHUB_ENV
        echo "GROUP_PATH_URLENCODE="$(echo $GROUP_INFO | jq -r '.full_path' | sed 's/\//%2F/g' )"" >> $GITHUB_ENV
        
    - name: Adjust REPO_PATH acording to Gitlab constrains 
      shell: bash
      run: | 
        # Adjust REPO_PATH acording to Gitlab constrains
        echo "REPO_PATH_GITLAB="$(echo "${{ inputs.REPO_PATH }}" | sed 's/_-_/-/g; s/_-/-/g; s/-_/-/g')"" >> $GITHUB_ENV

    - name: Get zenodo.json metadata from Github Open Data repository
      shell: bash
      run: |
         # Get zenodo.json metadata from Github Open Data repository
         ZENODOJSON_URL=$(curl \
          --request GET https://api.github.com/repos/${{ github.repository }}/contents/${{ inputs.ZENODOJSON_PATH }} \
          --header "Authorization: token ${{ inputs.GITHUB_TOKEN }}" \
          --header "Accept: application/vnd.github.mercy-preview+json" \
          | jq -r '.download_url')

         # Add Zenodo metadata to enviroment
         echo "REPO_NAME="$(curl $ZENODOJSON_URL | jq -r '.title')"" >> $GITHUB_ENV
         echo "DESCRIPTION="$(curl $ZENODOJSON_URL | jq -r '.description'| head -c 2000)"" >> $GITHUB_ENV
         echo "TOPICS="$(curl $ZENODOJSON_URL| jq -r '[.subjects[].subject] | join(",")')"" >> $GITHUB_ENV
      
    - name: Create OpenCoDE repository
      shell: bash
      run: |
        # Create OpenCoDE repository
        curl \
          --request POST "https://gitlab.opencode.de/api/v4/projects" \
          --header "PRIVATE-TOKEN: ${{ inputs.OPENCODE_TOKEN }}" \
          --data-urlencode "path=${{ env.REPO_PATH_GITLAB }}" \
          --data-urlencode "namespace_id=${{ inputs.GROUP_ID }}"

    - name: Update OpenCoDE repository metadata
      shell: bash
      run: |
        # Update OpenCoDE repository metadata
        response=$(curl \
          --request PUT "https://gitlab.opencode.de/api/v4/projects/${{ env.GROUP_PATH_URLENCODE }}%2F${{ env.REPO_PATH_GITLAB }}" \
          --header "PRIVATE-TOKEN: ${{ inputs.OPENCODE_TOKEN }}" \
          --data-urlencode "name=${{ env.REPO_NAME }}" \
          --data-urlencode "description=${{ env.DESCRIPTION }}" \
          --data-urlencode "topics=${{ env.TOPICS }}")
        echo "$response"

    - name: Make OpenCoDE repository public
      shell: bash
      run: |
        # Make OpenCoDE repository public
        response=$(curl \
          --request PUT "https://gitlab.opencode.de/api/v4/projects/${{ env.GROUP_PATH_URLENCODE }}%2F${{ env.REPO_PATH_GITLAB }}" \
          --header "PRIVATE-TOKEN: ${{ inputs.OPENCODE_TOKEN }}" \
          --data-urlencode "visibility=public")
        echo "$response"
        
    - name: Checkout Github repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        ref: ${{ inputs.BRANCH }}
        fetch-depth: '0'
        lfs: true

    - name: Force push latest Github Open Data repository status to OpenCoDE
      shell: bash
      run: |
        # Force push latest Github Open Data repository status to OpenCoDE
        git lfs install
        git config lfs.allowincompletepush true
        git remote add opencode https://${{ inputs.ACCESS_USER  }}:${{ inputs.OPENCODE_TOKEN }}@gitlab.opencode.de/${{ env.GROUP_PATH }}/${{ env.REPO_PATH_GITLAB}}.git
        git push opencode -f
        git push opencode -f --tags
